一、图片框架Fresco使用

1.初始化
a.参数设置(MainApplication.getConfigureCaches()方法)

final MemoryCacheParams bitmapCacheParams = new MemoryCacheParams(...);

Supplier<MemoryCacheParams> mSupplierMemoryCacheParams = new Supplier<MemoryCacheParams>(){
      @Override
      public MemoryCacheParams get() {return bitmapCacheParams}
}

ImagePipelineConfig.Builder builder = ImagePipelineConfig.newBuilder(context)
              .setDownsampleEnabled(true);
builder.setBitmapMemoryCacheParamsSupplier(mSupplierMemoryCacheParams);

//小图片的磁盘配置，代码中未使用到
DiskCacheConfig diskSmallCacheConfig = DiskCacheConfig.newBuilder()
              .setBaseDirectoryPath(context.getApplicationContext().getCacheDir())
              .build();
              
//默认图片的磁盘配置
DiskCacheConfig diskCachedConfig = DiskCacheConfig.newBuiler()
              .setBaseDirectoryPath(context.getApplicationContext().getCacheDir())
              //.setBaseDirecotryName(IMAGE_PIPELINE_CACHE_DIR) 文件夹名
              //.setCacheErrorLogger(cacheErrorLogger) 日志记录器用于日志错误的缓存
              //.setCacheEventListener(cacheEventListener) 缓存事件侦听器
              //.setDiskTrimmableRegistery(diskTrimmableRegistery) 将包含一个注册表的缓存减少磁盘空间的环境
              //.setMaxCacheSize(ConfigConstants.MAX_DISK_CACHE_SIZE) 默认缓存的最大size
              //.setMaxCacheSizeOnLowDiskSpace(MAX_DISK_CACHE_LOW_SIZE) 缓存的最大size，使用设备低级磁盘空间
              //.setMaxCacheSizeOnVeryLowDiskSpace(MAX_DISK_CACHE_VERYLOW_SIZE) 缓存的最大size，当设备极低磁盘空间
              .setVersion(version)
              .build();

//缓存图片配置
ImagePipelineConfig.Builder configBuilder = ImagePipelineConfig.newBuilder(context)
              .setBitmapMemoryCacheParamsSuppliers(mSupplierMemoryCacheParams)
              .setMainDiskCacheConfig(diskCacheConfig);

2.初始化
多次使用Fresco在Application.onCreate()方法中完成；初始化必须在setContentView之前调用
方法：Fresco.initialize(this, xxxConfig);
在Remusic中 调用 frescoInit(){Fresco.initialize(this, getConfigureCaches(this));}

3.使用图片
a.
ImageRequest imageRequest = ImageRequestBuilder.newBuilderWithSource(0
              .setProgressiveRenderingEnabled(true)
              .build();
ImagePipeline imagePipeline = Fresco.getImagePipeline();
DataSource<CloseableReference<ClosableImage>>
              dataSource = imagePipeline.fetchDecodedImage(imageRequest, PlayingActivity.this);
dateSource.subscribe(new BaseBitmapDataSubscriber(){
          @Override
          public void onNewResultImpl(@Nullable Bitmap bitmap)
          
          @Override
          public void onFailureImpl(DataSource dataSource)
},  CallerThreadExecutor.getInstance());

b.
ImageRequest request = ImageRequestBuilder.newBuilderWithSource(Uri.parse(info.getPic()))
              .setResizeOptions(new ResizeOptions(width, height))
              .build();
              
DraweeController controller = Fresco.newDraweeControllerBuilder()
                  .setOldController(((ItemView) holder)art.getController())
                  .setImageRequest(request)
                  .build();
                  
((ItemView) holder).art.setController(controller);                  
